<?php

declare(strict_types=1);

namespace Tests\Unit\Repository;


use App\Models\Show;
use App\Repository\DatabaseRepository;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;


class DatabaseRepositoryTest extends TestCase
{
    use RefreshDatabase;
    use HasFactory;

    private $databaseRepository;

    public function setUp(): void
    {
        $this->databaseRepository = new DatabaseRepository();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testFetchAll()
    {
        Show::factory()->count(3)->create();
        $result = $this->databaseRepository->fetchAll(3);

        $this->assertEquals(3, count($result['data']));
    }

    public function testFindByName()
    {
        $show = Show::factory()->create();
        $name = $show['name'];
        $result = $this->databaseRepository->findByName($name, 1);
        $expected = $show['name'];

        $this->assertEquals($expected, $result['data'][0]['name']);
    }

    public function testInsert()
    {
        $show = Show::factory()->make();
        $data = [
            'name' => $show['name'],
            'image' => $show['image'],
            'link' => $show['link'],
            'show_id' => $show['show_id'],
            'status' => $show['status'],
        ];

        $this->databaseRepository->insert($data);
        $this->assertDatabaseHas('shows', $data);
    }

    public function testFetchLatest()
    {
        $show = Show::factory()->count(5)->create();
        $result = $this->databaseRepository->fetchLatest();
        $expected = $show[4]['id'];

        $this->assertEquals($expected, $result['id']);
    }
}
