<?php


namespace Tests\Unit\Services;


use App\Models\Show;
use App\Repository\DatabaseRepository;
use App\Repository\TVMazeRepository;
use App\Services\ShowsService;
use Illuminate\Support\Facades\Config;
use Mockery;
use Tests\TestCase;

class ShowsServiceTest extends TestCase
{
    private $databaseRepository;

    private $tvMazeRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->databaseRepository = Mockery::mock(DatabaseRepository::class);
        $this->tvMazeRepository = Mockery::mock(TVMazeRepository::class);

        Config::set('shows.shows', 'shows');
        Config::set('shows.search_shows', 'search');
    }

    public function invokeMethod(&$object, string $methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($object, $parameters);
    }

    public function testProcessLimit(): void
    {
        $data = (object)[
            'show_id' => 300
        ];

        $this->databaseRepository
            ->shouldReceive('fetchLatest')
            ->andReturn($data);
        $showService = new ShowsService($this->tvMazeRepository, $this->databaseRepository);
        $result = $this->invokeMethod($showService, 'processLimit', []);

        $this->assertEquals(2, $result);
    }

    public function testInsertShows(): void
    {
        $show = Show::factory()->make();

        $data = ['show' =>
            [
                'id'   => $show['show_id'],
                'name' => $show['name'],
                'image' => $show['image'],
                'url' => $show['link'],
                'status' => $show['status'],
            ]];

        $expected = [
            'name' => $show['name'],
            'image' => $show['image'],
            'link' => $show['link'],
            'show_id' => $show['show_id'],
            'status' => $show['status'],
        ];

//        $databaseRepository = $this->createMock(DatabaseRepository::class);
//        $databaseRepository->expects($this->once())
//            ->method('insert');
        $databaseRepository = Mockery::mock(DatabaseRepository::class);
        $databaseRepository->shouldReceive('insert')->once();

        $showService = new ShowsService($this->tvMazeRepository, $databaseRepository);

        $d = $this->invokeMethod($showService, 'insertShows', [$data]);
        $this->assertDatabaseHas('shows', $expected);
    }

    public function testProcessShowArray(): void
    {
        $show = Show::factory()->make();

        $data =[
            [
                'id'   => $show['show_id'],
                'name' => $show['name'],
                'image' => $show['image'],
                'url' => $show['link'],
                'status' => $show['status'],
            ]];

        $expected = [
            'name' => $show['name'],
            'image' => $show['image'],
            'link' => $show['link'],
            'show_id' => $show['show_id'],
            'status' => $show['status'],
        ];


        $showService = new ShowsService($this->tvMazeRepository, $this->databaseRepository);

        $result = $this->invokeMethod($showService, 'processShowArray', $data);

        $this->assertEquals($result['name'], $show['name']);
    }
}
